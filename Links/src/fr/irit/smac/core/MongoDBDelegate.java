package fr.irit.smac.core;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Vector;

import org.apache.commons.lang3.StringUtils;
import org.bson.Document;

import com.mongodb.BasicDBObject;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;

public class MongoDBDelegate {

	public static void updateCollectionDescription(String collectionNameToAddDescription,
			String descriptionToAdd) {
		MongoCollection<Document> collection = Links.database.getCollection(collectionNameToAddDescription);
		Document doc = collection.find(Filters.eq("LinksDescriptionXP", "The description")).first();
		Document newDocument = new Document("LinksDescriptionXP", "The description").append("Desc : ",
				"DescriptionOfXP " + descriptionToAdd);
		if (doc != null) {
			collection.findOneAndReplace(new BasicDBObject().append("LinksDescriptionXP", "The description"),
					newDocument);
		} else {
			collection.insertOne(newDocument);
		}
	}

	public static void delete(String xpName) {
		Links.database.getCollection(xpName).drop();
		Links.database.getCollection(Links.collectionNameExperimentList).findOneAndDelete(Filters.eq("xpName", xpName));
	}

	public static void create(String xpName, boolean getCSS_file) {
		MongoCollection<Document> collection = Links.database.getCollection(Links.collectionNameExperimentList);
		collection.deleteMany(Filters.eq("xpName", xpName));

		if (getCSS_file) {
			// ??
			Links.getCssFilePathFromXpName(xpName);
		} else {
			try {
				PrintWriter writer = new PrintWriter("linksAutoGeneratedStyleSheet.css", "UTF-8");
				writer.println("");
				writer.close();
			} catch (IOException e) {
				// do something
			}

			File file = new File("linksAutoGeneratedStyleSheet.css");
			String absolutePath = file.getAbsolutePath();
			String filePath = absolutePath;
			filePath = filePath.substring(0, absolutePath.lastIndexOf(File.separator))
					+ "\\linksAutoGeneratedStyleSheet.css";
			collection.insertOne(new Document("xpName", xpName).append("cssFile", filePath));
		}

		MongoCollection<Document> collection2 = Links.database.getCollection(xpName);
		collection2.deleteMany(Filters.eq("xpName", xpName));
		collection2.insertOne(new Document("xpName", xpName).append("maxNum", 0));
	}

	public static void create(String xpName, String cssPath) {
		MongoCollection<Document> collection = Links.database.getCollection(Links.collectionNameExperimentList);
		collection.deleteMany(Filters.eq("xpName", xpName));
		collection.insertOne(new Document("xpName", xpName).append("cssFile", cssPath));

		MongoCollection<Document> collection2 = Links.database.getCollection(xpName);
		collection2.deleteMany(Filters.eq("xpName", xpName));
		collection2.insertOne(new Document("xpName", xpName).append("maxNum", 0));
	}

	public static void drop(String xpName) {
		MongoCollection<Document> collection2 = Links.database.getCollection(xpName);
		if (collection2 != null) {
			collection2.drop();
			collection2.insertOne(new Document("xpName", xpName).append("maxNum", 0));
		}
	}

	public static Vector<String> getExperiencesList() {
		MongoCollection<Document> maCollection = Links.database.getCollection(Links.collectionNameExperimentList);

		Vector<String> result = new Vector<String>();
		for (Document document : maCollection.find()) {
			Iterator<Entry<String, Object>> it = document.entrySet().iterator();
			it.next();
			String xpName = (String) it.next().getValue();
			result.addElement(xpName);
		}
		return result;
	}

	public static String getDescription(String collectionName) {
		MongoCollection<Document> collection = Links.database.getCollection(collectionName);
		Document doc = collection.find(Filters.eq("LinksDescriptionXP", "The description")).first();
		String result = StringUtils.EMPTY;
		if (doc != null) {
			Iterator<Entry<String, Object>> it = doc.entrySet().iterator();
			// We need to iterate 3 times
			it.next();
			it.next();
			result = it.next().getValue().toString();
		}
		return result;
	}
}
